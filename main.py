# Main script for executing the action, used the AWS SDK for python a lot
# https://boto3.amazonaws.com/v1/documentation/api/latest/index.html
print("Running main action script...")
import boto3, botocore
import docker
import os
import re
import io
from base64 import b64decode

# FOR TESTING
from dotenv import load_dotenv

load_dotenv("dev.env")

# Number of 'steps' in this script
N = 6

# Initialise a new boto3 session with the given credentials
session = boto3.Session(
    aws_access_key_id=os.getenv("AWS_ACCESS_KEY_ID"),
    aws_secret_access_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
    region_name=os.getenv("AWS_REGION"),
)

print(f"Session initialised for {session.resource('iam').CurrentUser().user_name}")

# Get the name of the function to initialise (should be given in PascalCase)
name = os.getenv("NEW_FUNCTION_NAME")

# ECR Repo names need to be in kebab-case
new_ecr_repo_name = re.sub(r"(?<!^)(?=[A-Z])", "-", name).lower()

# We make the lambda function in camelCase
new_lambda_function_name = name[0].lower() + name[1:]

"""
Create a new ECR Repository
"""
ecr_client = session.client("ecr")

try:
    ecr_res = ecr_client.create_repository(
        repositoryName=new_ecr_repo_name,
        imageTagMutability="MUTABLE",
        imageScanningConfiguration={"scanOnPush": False},
    )

    # Record created repo arn and uri for later use
    ecr_repo_arn = ecr_res["repository"]["repositoryArn"]
    ecr_repo_uri = ecr_res["repository"]["repositoryUri"]
    print(f"[1/{N}] Created new ECR Repo ({ecr_repo_arn})")

except botocore.exceptions.ClientError as e:
    if e.response["Error"]["Code"] == "RepositoryAlreadyExistsException":
        print("\tRepo already existed but continuing anyways")

        # We need to fetch info about the registry and make the arn\ and uri on our own
        res = ecr_client.describe_registry()
        ecr_repo_arn = (
            f"arn:aws:ecr:eu-west-2:{res['registryId']}:repository/{new_ecr_repo_name}"
        )
        ecr_repo_uri = f"{res['registryId']}.dkr.ecr.{os.getenv('AWS_REGION')}.amazonaws.com/{new_ecr_repo_name}"
        print(f"[1/{N}] Repo Existed already, continuing anyways ({ecr_repo_arn})")
    else:
        raise e

"""
Build and upload the placeholder image to the ecr
(required to be able to initialise the Lambda function)
"""
# Initialise docker client
docker_client = docker.DockerClient()
print(f"[2/{N}] Initialised Docker Client ")

# Build the placeholder image
placeholder_dockerfile = io.BytesIO(
    str.encode(
        f"""FROM alpine:3.14
CMD ["echo", "Placeholder image for the {new_lambda_function_name} lambda function used in initialisation, to be replaced!"]"""
    )
)

placeholder_img_tag = ecr_repo_uri + ":latest"
docker_client.images.build(fileobj=placeholder_dockerfile, tag=placeholder_img_tag)
print(f"[3/{N}] Successfully Built placeholder image")

# Get an authorisation token (to be able to push with docker to AWS ECR)
ecr_res = ecr_client.get_authorization_token(registryIds=[ecr_repo_uri.split(".")[0]])
ecr_auth = b64decode(ecr_res["authorizationData"][0]["authorizationToken"]).split(b":")
print(
    f"[4/{N}] ECR Auth Token Acquired for user ({ecr_auth[0]}) expiresAt {ecr_res['authorizationData'][0]['expiresAt']}"
)

# Apply acquired token credentials to docker client
docker_res = docker_client.login(
    username=ecr_auth[0].decode("utf-8"),
    password=ecr_auth[1].decode("utf-8"),
    registry=ecr_repo_uri.split("/")[0],
)
print(f"[5/{N}] Authenticated Docker Client (Status: {docker_res['Status']})")

# Push placeholder image to ECR
push_res = docker_client.images.push(repository=placeholder_img_tag)
print(push_res)
print(f"[6/{N}] Pushed placeholder image to new ECR Repo")

"""
Create a new lambda function from the image uploaded to the new ECR Repo
https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html
"""
# Create an execution role for the new function to be created
iam_client = session.client("iam")

iam_res = iam_client.create_role(
    RoleName=new_ecr_repo_name + "-ex",
    AssumeRolePolicyDocument='{"Version": "2012-10-17","Statement": [{ "Effect": "Allow", "Principal": {"Service": "lambda.amazonaws.com"}, "Action": "sts:AssumeRole"}]}',
    Description=f"Execution role for the {new_lambda_function_name} Lambda Function",
)

execution_role_arn = iam_res["Role"]["Arn"]
print(f"[7/{N}] Created new execution role for lambda function ({execution_role_arn})")

# Attach policy to new role
iam_client.attach_role_policy(
    RoleName=new_ecr_repo_name + "-ex",
    PolicyArn="arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
)

# Finally, create the new lambda function
lambda_client = session.client("lambda")

lambda_res = lambda_client.create_function(
    FunctionName=new_lambda_function_name,
    Role=execution_role_arn,
    Code={"ImageUri": placeholder_img_tag},
    Description="Grading/Algorithm function automatically generated by the init-lambda-action",
    PackageType="Image",
    Publish=True,
)

lambda_function_arn = lambda_res["FunctionArn"]
print(f"[8/{N}] Created the new Lambda Function ({lambda_function_arn})")

"""
On the API Gateway selected, created all the resources required to connect the new lambda function
https://stackoverflow.com/questions/58859917/creating-aws-lambda-integrated-api-gateway-resource-with-boto3

"""

# Setup the lambda function to be triggered by its relevant API Gateway
gateway_arn = os.getenv("AWS_API_GATEWAY_ARN")
